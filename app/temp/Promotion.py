import os
import sys
module_path = os.path.abspath(os.path.join('../..'))
if module_path not in sys.path:
    sys.path.append(module_path)
# Local imports
import app.streamlit.SessionState as session_state
import app.forecasting.data_generator as gen
# Imports
import streamlit as st
import matplotlib.pyplot as plt
import pandas as pd
#import timesynth as ts
import datetime
#from datetime import datetime
from datetime import date


session = session_state.init_session_id()



st.header("Welcome")
st.markdown(f"Current Session Id: **{session}**")




def make_graph():
    settings = gen.Settings(base= _base, trend=_trend/360)
    samples, _ = gen.generate(settings)
    fig, ax = plt.subplots()
    ax.set_xlabel('Date')
    ax.set_ylabel('Volume')
    ax.set_title('Autogenerated Timeseries Data')
    ax.plot(samples)
    st.pyplot(fig)


# Base Values
c1, c2 = st.beta_columns([1, 1])
_base = c1.number_input("Base", value=0.0, step=0.1)
_trend = c2.number_input("Yearly Trend", value=0.0, step=0.1)


# Primary Signal
_signal_type1 = st.selectbox("Main Signal Type", ("None", "Gaussian", "Sinusoidal"))
if(_signal_type1=="Gaussian"):
    c1, c2, c3 = st.beta_columns([1, 1, 1])
    _a1 = c1.selectbox("Kernal", ("Matern", ))
    _b1 = c2.number_input("nu", value=3./2)
    _imp1 = c3.number_input("Impact", value=1.0, key=44)
elif(_signal_type1=="Sinusoidal"):
    c1, c2 = st.beta_columns([1, 1])
    _a1 = c1.number_input("Frequency", value=0.25, key=2342)
    _imp1 = c2.number_input("Impact", value=1.0, key=66)

# Secondary Signal
_signal_type2 = st.selectbox("Secondary Signal Type", ("None", "Sinusoidal"))
if(_signal_type2=="Sinusoidal"):
    d1, d2 = st.beta_columns([1, 1])
    _a2 = d1.number_input("Frequency", value=0.25, key=124)
    _z2 = d1.number_input("Impact", value=0.5, key=574)


# Noise
_noise_type = st.selectbox("Noise", ("None", "White", "Red"))
if(_noise_type=="White"):
    c1, c2 = st.beta_columns([1, 1])
    _n1 = c1.number_input("std", value=0.1, key=3354535)
    _noise_imp = c2.number_input("Impact", value=1.0, key=42)
elif(_noise_type=="Red"):
    c1, c2, c3 = st.beta_columns([1, 1, 1])
    _n1 = c1.number_input("std", value=0.5, key=136214)
    _n2 = c1.number_input("tau", value=0.8, key=123155)
    _noise_imp = c3.number_input("Impact", value=1.0, key=4907)

#Marketing Promotion 
st.header("Are you going to start a promotion campaign?")
_promo_type = st.selectbox("Promotion", ("No", "Yes"))
if(_promo_type =="Yes"):
    c1, c2 = st.beta_columns([1, 1])
    _p1 = c1.date_input("When your promotion starts?",datetime.date(2020, 1, 1))
    #_p2 = c2.date_input("When your promotion will end?",datetime.date(2020, 1, 1))
    _p2 = c2.number_input("Promotion Duration in Days", value=1)
    


def demo_graph():
    start_date = '1/1/2020'
    frequency = 'D'
    number_datapoints = 250
    date_range = pd.date_range(start=start_date, freq=frequency, periods=number_datapoints)
    zeros = pd.DataFrame(data=range(0, number_datapoints), index=date_range) * 0

    base = pd.DataFrame(data=range(0, number_datapoints), index=date_range)
    base = zeros + _base
    trend = pd.DataFrame(data=range(0, number_datapoints), index=date_range)
    trend = trend * (_trend/360)

    time_sampler = ts.TimeSampler(stop_time=20)
    irregular_time_samples = time_sampler.sample_irregular_time(num_points=500, keep_percentage=50)

    main_signal = zeros
    if (_signal_type1 == "Gaussian"):
        signal = ts.signals.GaussianProcess(kernel=_a1, nu=_b1)
        _, signal, _ = ts.TimeSeries(signal, noise_generator=None).sample(irregular_time_samples)
        signal = signal * _imp1
        main_signal = pd.DataFrame(data=signal, index=date_range)
    elif (_signal_type1 == "Sinusoidal"):
        signal = ts.signals.Sinusoidal(frequency=_a1)
        _, signal, _ = ts.TimeSeries(signal, noise_generator=None).sample(irregular_time_samples)
        signal = signal * _imp1
        main_signal = pd.DataFrame(data=signal, index=date_range)

    second_signal = zeros
    if (_signal_type2 == "Sinusoidal"):
        signal = ts.signals.Sinusoidal(frequency=_a2)
        _, signal, _ = ts.TimeSeries(signal, noise_generator=None).sample(irregular_time_samples)
        signal = signal * _z2
        second_signal = pd.DataFrame(data=signal, index=date_range)
        data = [date_range, signal]
        second_signal2 = pd.DataFrame(data=data,  columns = ['ds', 'y'])

    noise = zeros
    if (_noise_type == "White"):
        _, _, error = ts.TimeSeries(ts.signals.Sinusoidal(frequency=0), noise_generator=ts.noise.GaussianNoise(std=_n1)).sample(irregular_time_samples)
        error = error * _noise_imp
        noise = pd.DataFrame(data=error, index=date_range)
    elif (_noise_type == "Red"):
        _, _, error = ts.TimeSeries(ts.signals.Sinusoidal(frequency=0), noise_generator=ts.noise.RedNoise(std=_n1, tau=_n2)).sample(irregular_time_samples)
        error = error * _noise_imp
        noise = pd.DataFrame(data=error, index=date_range)


    promotion = zeros
    if (_promo_type =="Yes"):
        promotion_date_range = pd.date_range(start=_p1, freq=frequency, periods=_p2)
        promotion = pd.DataFrame(data=range(0, _p2), index=promotion_date_range) * 0
        pro1 = zeros + promotion + .5
        pro1 = pro1.fillna(0)
    elif (_promo_type == "No"):
        pro1 = zeros 

  

    out = base + trend + main_signal + second_signal + noise + pro1
    
   
    fig, ax = plt.subplots()
    ax.set_xlabel('Date')
    ax.set_ylabel('Volume')
    ax.set_title('Autogenerated Timeseries Data')
    ax.plot(out)
    st.pyplot(fig)

    fig, ax = plt.subplots()
    ax.set_xlabel('Date')
    ax.set_ylabel('Volume')
    ax.set_title('Autogenerated Timeseries Components')
    ax.plot(base)
    ax.plot(trend)
    ax.plot(main_signal)
    ax.plot(second_signal)
    ax.plot(noise)
    st.pyplot(fig)









if st.button('Update Graph'):
    demo_graph()





