# Imports
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
import base64
import random
# Local imports
import os
import sys
module_path = os.path.abspath(os.path.join('../..'))
if module_path not in sys.path:
    sys.path.append(module_path)
from app.streamlit.SessionState import SessionState as session_state
import app.forecasting.data_generator as gen
import app.streamlit.Util as util


KEY_TIMESERIES_AUTO_DATA = "timeseries_auto_data"
KEY_TIMESERIES_AUTO_DATA_GRAPH = "timeseries_auto_data_graph"
KEY_TIMESERIES_AUTO_COMPOSITE = "timeseries_auto_composite"
KEY_TIMESERIES_AUTO_COMPOSITE_GRAPH = "timeseries_auto_composite_graph"
KEY_TIMESERIES_AUTO_SETTINGS = "timeseries_auto_settings"


# Main method constructing the page
def build_page_auto_generate_data(session: session_state):

    # Create new Settings (Mostly used for Dates)
    settings = gen.Settings()

    # Date Settings
    col01, col02 = st.beta_columns((1, 1))
    in_date_start = col01.date_input('Start Date')
    in_date_number_entries = col02.number_input("Number of Entries", value=100, step=1, min_value=1)
    settings.set_date_range(gen.util_make_daterange(in_date_start, in_date_number_entries))

    # Generate New / Mutate
    col01, col02 = st.beta_columns((1, 1))
    in_is_new = col01.button("Generate New Timeseries")
    in_is_mutate = col02.button("Mutate current Timeseries")
    if in_is_new or session.get_value(KEY_TIMESERIES_AUTO_DATA_GRAPH, default=None) is None:
        create_new_auto_timeseries(session, settings)
    if in_is_mutate:
        mutate_current_timeseries(session, settings)

    # Export Current Timeseries into a csv
    col01, col02 = st.beta_columns((1, 1))
    util.bake_csv_data(session.get_value(KEY_TIMESERIES_AUTO_DATA), link_text="Download Current Timeseries", link_col=col01)

    # Renders Current Autogenerated Graph and Composites
    col01, col02 = st.beta_columns((1, 1))
    col01.pyplot(session.get_value(KEY_TIMESERIES_AUTO_DATA_GRAPH))
    col02.pyplot(session.get_value(KEY_TIMESERIES_AUTO_COMPOSITE_GRAPH))


# Create new Auto Graph and store it in session
def create_new_auto_timeseries(session: session_state, settings: gen.Settings):
    settings.set_trend(random.uniform(-1.0, 1.0)/100)
    settings.add_noise_gaussian_noise(random.uniform(0.0, 1.0))
    settings.add_signal_sinusoidal(random.uniform(0.0, 1.0), random.uniform(0.1, 1.0))
    settings.add_signal_gaussian_process(random.uniform(0.0, 1.0), kernel="Matern", nu=random.uniform(0.1, 0.9))
    # Generate data based on Settings and store appropriately
    data, composite = gen.generate(settings)
    session.set_value(KEY_TIMESERIES_AUTO_DATA, data)
    session.set_value(KEY_TIMESERIES_AUTO_COMPOSITE, composite)
    graph = util.make_timeseries_graph(data)
    comp_graph = util.make_timeseries_multi_graph(composite)
    session.set_value(KEY_TIMESERIES_AUTO_DATA_GRAPH, graph)
    session.set_value(KEY_TIMESERIES_AUTO_COMPOSITE_GRAPH, comp_graph)
    session.set_value(KEY_TIMESERIES_AUTO_SETTINGS, settings)


def mutate_current_timeseries(session: session_state, settings: gen.Settings):
    # TODO: Define Settings mutator
    # Generate data based on Settings and store appropriately
    data, composite = gen.generate(settings)
    session.set_value(KEY_TIMESERIES_AUTO_DATA, data)
    session.set_value(KEY_TIMESERIES_AUTO_COMPOSITE, composite)
    graph = util.make_timeseries_graph(data)
    comp_graph = util.make_timeseries_multi_graph(composite)
    session.set_value(KEY_TIMESERIES_AUTO_DATA_GRAPH, graph)
    session.set_value(KEY_TIMESERIES_AUTO_COMPOSITE_GRAPH, comp_graph)
    session.set_value(KEY_TIMESERIES_AUTO_SETTINGS, settings)

